// // <auto-generated by VariantGenerator for AppendStreamFailure @ 2025-06-17 10:25:39 />
// #pragma warning disable CS8524 // The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value.
// // ReSharper disable SwitchStatementHandlesSomeKnownEnumValuesWithDefault
// #nullable enable
//
// using System;
// using System.Collections.Generic;
// using System.Runtime.CompilerServices;
// using System.Threading.Tasks;
// using Kurrent.Variant;
//
// namespace Kurrent.Client.Model;
//
// public readonly partial record struct AppendStreamFailure {
//     readonly object _value;
//     readonly byte _index;
//
//     public AppendStreamFailure(global::Kurrent.Client.Model.ErrorDetails.StreamNotFound streamNotFound) {
//         _value = streamNotFound;
//         _index = 0;
//
//     }
//     public AppendStreamFailure(global::Kurrent.Client.Model.ErrorDetails.StreamDeleted streamDeleted) {
//         _value = streamDeleted;
//         _index = 1;
//
//     }
//     public AppendStreamFailure(global::Kurrent.Client.Model.ErrorDetails.AccessDenied accessDenied) {
//         _value = accessDenied;
//         _index = 2;
//
//     }
//     public AppendStreamFailure(global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded transactionMaxSizeExceeded) {
//         _value = transactionMaxSizeExceeded;
//         _index = 3;
//
//     }
//     public AppendStreamFailure(global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict streamRevisionConflict) {
//         _value = streamRevisionConflict;
//         _index = 4;
//
//     }
//
//     public enum AppendStreamFailureCase : byte {
//         StreamNotFound = 0,
//         StreamDeleted = 1,
//         AccessDenied = 2,
//         TransactionMaxSizeExceeded = 3,
//         StreamRevisionConflict = 4
//     }
//
//     public object Value => _value;
//     public int    Index => _index;
//
//     public AppendStreamFailureCase Case => (AppendStreamFailureCase)_index;
//
//     public bool IsStreamNotFound => Case == AppendStreamFailureCase.StreamNotFound;
//     public global::Kurrent.Client.Model.ErrorDetails.StreamNotFound AsStreamNotFound => IsStreamNotFound ? (global::Kurrent.Client.Model.ErrorDetails.StreamNotFound)Value! : throw new InvalidOperationException($"Cannot return StreamNotFound as current type is {Value!.GetType().Name} (Case {Case})");
//
//     public bool IsStreamDeleted => Case == AppendStreamFailureCase.StreamDeleted;
//     public global::Kurrent.Client.Model.ErrorDetails.StreamDeleted AsStreamDeleted => IsStreamDeleted ? (global::Kurrent.Client.Model.ErrorDetails.StreamDeleted)Value! : throw new InvalidOperationException($"Cannot return StreamDeleted as current type is {Value!.GetType().Name} (Case {Case})");
//
//     public bool IsAccessDenied => Case == AppendStreamFailureCase.AccessDenied;
//     public global::Kurrent.Client.Model.ErrorDetails.AccessDenied AsAccessDenied => IsAccessDenied ? (global::Kurrent.Client.Model.ErrorDetails.AccessDenied)Value! : throw new InvalidOperationException($"Cannot return AccessDenied as current type is {Value!.GetType().Name} (Case {Case})");
//
//     public bool IsTransactionMaxSizeExceeded => Case == AppendStreamFailureCase.TransactionMaxSizeExceeded;
//     public global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded AsTransactionMaxSizeExceeded => IsTransactionMaxSizeExceeded ? (global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded)Value! : throw new InvalidOperationException($"Cannot return TransactionMaxSizeExceeded as current type is {Value!.GetType().Name} (Case {Case})");
//
//     public bool IsStreamRevisionConflict => Case == AppendStreamFailureCase.StreamRevisionConflict;
//     public global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict AsStreamRevisionConflict => IsStreamRevisionConflict ? (global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict)Value! : throw new InvalidOperationException($"Cannot return StreamRevisionConflict as current type is {Value!.GetType().Name} (Case {Case})");
//
//     #region . Implicit Operators .
//
//     public static implicit operator AppendStreamFailure(global::Kurrent.Client.Model.ErrorDetails.StreamNotFound _) => new(_);
//     public static implicit operator global::Kurrent.Client.Model.ErrorDetails.StreamNotFound(AppendStreamFailure _) => _.AsStreamNotFound;
//     public static implicit operator AppendStreamFailure(global::Kurrent.Client.Model.ErrorDetails.StreamDeleted _) => new(_);
//     public static implicit operator global::Kurrent.Client.Model.ErrorDetails.StreamDeleted(AppendStreamFailure _) => _.AsStreamDeleted;
//     public static implicit operator AppendStreamFailure(global::Kurrent.Client.Model.ErrorDetails.AccessDenied _) => new(_);
//     public static implicit operator global::Kurrent.Client.Model.ErrorDetails.AccessDenied(AppendStreamFailure _) => _.AsAccessDenied;
//     public static implicit operator AppendStreamFailure(global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded _) => new(_);
//     public static implicit operator global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded(AppendStreamFailure _) => _.AsTransactionMaxSizeExceeded;
//     public static implicit operator AppendStreamFailure(global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict _) => new(_);
//     public static implicit operator global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict(AppendStreamFailure _) => _.AsStreamRevisionConflict;
//
//     #region . Switch .
//
//     public void Switch(Action<global::Kurrent.Client.Model.ErrorDetails.StreamNotFound> onStreamNotFound, Action<global::Kurrent.Client.Model.ErrorDetails.StreamDeleted> onStreamDeleted, Action<global::Kurrent.Client.Model.ErrorDetails.AccessDenied> onAccessDenied, Action<global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded> onTransactionMaxSizeExceeded, Action<global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict> onStreamRevisionConflict) {
//         switch (Case) {
//             case AppendStreamFailureCase.StreamNotFound: onStreamNotFound(AsStreamNotFound); break;
//             case AppendStreamFailureCase.StreamDeleted: onStreamDeleted(AsStreamDeleted); break;
//             case AppendStreamFailureCase.AccessDenied: onAccessDenied(AsAccessDenied); break;
//             case AppendStreamFailureCase.TransactionMaxSizeExceeded: onTransactionMaxSizeExceeded(AsTransactionMaxSizeExceeded); break;
//             case AppendStreamFailureCase.StreamRevisionConflict: onStreamRevisionConflict(AsStreamRevisionConflict); break;
//         }
//     }
//
//     public void Switch<TState>(Action<global::Kurrent.Client.Model.ErrorDetails.StreamNotFound, TState> onStreamNotFound, Action<global::Kurrent.Client.Model.ErrorDetails.StreamDeleted, TState> onStreamDeleted, Action<global::Kurrent.Client.Model.ErrorDetails.AccessDenied, TState> onAccessDenied, Action<global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded, TState> onTransactionMaxSizeExceeded, Action<global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict, TState> onStreamRevisionConflict, TState state) {
//         switch (Case) {
//             case AppendStreamFailureCase.StreamNotFound: onStreamNotFound(AsStreamNotFound, state); break;
//             case AppendStreamFailureCase.StreamDeleted: onStreamDeleted(AsStreamDeleted, state); break;
//             case AppendStreamFailureCase.AccessDenied: onAccessDenied(AsAccessDenied, state); break;
//             case AppendStreamFailureCase.TransactionMaxSizeExceeded: onTransactionMaxSizeExceeded(AsTransactionMaxSizeExceeded, state); break;
//             case AppendStreamFailureCase.StreamRevisionConflict: onStreamRevisionConflict(AsStreamRevisionConflict, state); break;
//         }
//     }
//
//     public ValueTask SwitchAsync(Func<global::Kurrent.Client.Model.ErrorDetails.StreamNotFound, ValueTask> onStreamNotFound, Func<global::Kurrent.Client.Model.ErrorDetails.StreamDeleted, ValueTask> onStreamDeleted, Func<global::Kurrent.Client.Model.ErrorDetails.AccessDenied, ValueTask> onAccessDenied, Func<global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded, ValueTask> onTransactionMaxSizeExceeded, Func<global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict, ValueTask> onStreamRevisionConflict) => Case switch {
//         AppendStreamFailureCase.StreamNotFound => onStreamNotFound(AsStreamNotFound),
//         AppendStreamFailureCase.StreamDeleted => onStreamDeleted(AsStreamDeleted),
//         AppendStreamFailureCase.AccessDenied => onAccessDenied(AsAccessDenied),
//         AppendStreamFailureCase.TransactionMaxSizeExceeded => onTransactionMaxSizeExceeded(AsTransactionMaxSizeExceeded),
//         AppendStreamFailureCase.StreamRevisionConflict => onStreamRevisionConflict(AsStreamRevisionConflict),
//     };
//
//     public ValueTask SwitchAsync<TState>(Func<global::Kurrent.Client.Model.ErrorDetails.StreamNotFound, TState, ValueTask> onStreamNotFound, Func<global::Kurrent.Client.Model.ErrorDetails.StreamDeleted, TState, ValueTask> onStreamDeleted, Func<global::Kurrent.Client.Model.ErrorDetails.AccessDenied, TState, ValueTask> onAccessDenied, Func<global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded, TState, ValueTask> onTransactionMaxSizeExceeded, Func<global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict, TState, ValueTask> onStreamRevisionConflict, TState state) => Case switch {
//         AppendStreamFailureCase.StreamNotFound => onStreamNotFound(AsStreamNotFound, state),
//         AppendStreamFailureCase.StreamDeleted => onStreamDeleted(AsStreamDeleted, state),
//         AppendStreamFailureCase.AccessDenied => onAccessDenied(AsAccessDenied, state),
//         AppendStreamFailureCase.TransactionMaxSizeExceeded => onTransactionMaxSizeExceeded(AsTransactionMaxSizeExceeded, state),
//         AppendStreamFailureCase.StreamRevisionConflict => onStreamRevisionConflict(AsStreamRevisionConflict, state),
//     };
//
//     #endregion
//
//     #region . Match .
//
//     public TResult Match<TResult>(Func<global::Kurrent.Client.Model.ErrorDetails.StreamNotFound, TResult> onStreamNotFound, Func<global::Kurrent.Client.Model.ErrorDetails.StreamDeleted, TResult> onStreamDeleted, Func<global::Kurrent.Client.Model.ErrorDetails.AccessDenied, TResult> onAccessDenied, Func<global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded, TResult> onTransactionMaxSizeExceeded, Func<global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict, TResult> onStreamRevisionConflict) => Case switch {
//         AppendStreamFailureCase.StreamNotFound => onStreamNotFound(AsStreamNotFound),
//         AppendStreamFailureCase.StreamDeleted => onStreamDeleted(AsStreamDeleted),
//         AppendStreamFailureCase.AccessDenied => onAccessDenied(AsAccessDenied),
//         AppendStreamFailureCase.TransactionMaxSizeExceeded => onTransactionMaxSizeExceeded(AsTransactionMaxSizeExceeded),
//         AppendStreamFailureCase.StreamRevisionConflict => onStreamRevisionConflict(AsStreamRevisionConflict),
//     };
//
//     public TResult Match<TResult, TState>(Func<global::Kurrent.Client.Model.ErrorDetails.StreamNotFound, TState, TResult> onStreamNotFound, Func<global::Kurrent.Client.Model.ErrorDetails.StreamDeleted, TState, TResult> onStreamDeleted, Func<global::Kurrent.Client.Model.ErrorDetails.AccessDenied, TState, TResult> onAccessDenied, Func<global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded, TState, TResult> onTransactionMaxSizeExceeded, Func<global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict, TState, TResult> onStreamRevisionConflict, TState state) => Case switch {
//         AppendStreamFailureCase.StreamNotFound => onStreamNotFound(AsStreamNotFound, state),
//         AppendStreamFailureCase.StreamDeleted => onStreamDeleted(AsStreamDeleted, state),
//         AppendStreamFailureCase.AccessDenied => onAccessDenied(AsAccessDenied, state),
//         AppendStreamFailureCase.TransactionMaxSizeExceeded => onTransactionMaxSizeExceeded(AsTransactionMaxSizeExceeded, state),
//         AppendStreamFailureCase.StreamRevisionConflict => onStreamRevisionConflict(AsStreamRevisionConflict, state),
//     };
//
//     public ValueTask<TResult> MatchAsync<TResult>(Func<global::Kurrent.Client.Model.ErrorDetails.StreamNotFound, ValueTask<TResult>> onStreamNotFound, Func<global::Kurrent.Client.Model.ErrorDetails.StreamDeleted, ValueTask<TResult>> onStreamDeleted, Func<global::Kurrent.Client.Model.ErrorDetails.AccessDenied, ValueTask<TResult>> onAccessDenied, Func<global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded, ValueTask<TResult>> onTransactionMaxSizeExceeded, Func<global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict, ValueTask<TResult>> onStreamRevisionConflict) => Case switch {
//         AppendStreamFailureCase.StreamNotFound => onStreamNotFound(AsStreamNotFound),
//         AppendStreamFailureCase.StreamDeleted => onStreamDeleted(AsStreamDeleted),
//         AppendStreamFailureCase.AccessDenied => onAccessDenied(AsAccessDenied),
//         AppendStreamFailureCase.TransactionMaxSizeExceeded => onTransactionMaxSizeExceeded(AsTransactionMaxSizeExceeded),
//         AppendStreamFailureCase.StreamRevisionConflict => onStreamRevisionConflict(AsStreamRevisionConflict),
//     };
//
//     public ValueTask<TResult> MatchAsync<TResult, TState>(Func<global::Kurrent.Client.Model.ErrorDetails.StreamNotFound, TState, ValueTask<TResult>> onStreamNotFound, Func<global::Kurrent.Client.Model.ErrorDetails.StreamDeleted, TState, ValueTask<TResult>> onStreamDeleted, Func<global::Kurrent.Client.Model.ErrorDetails.AccessDenied, TState, ValueTask<TResult>> onAccessDenied, Func<global::Kurrent.Client.Model.ErrorDetails.TransactionMaxSizeExceeded, TState, ValueTask<TResult>> onTransactionMaxSizeExceeded, Func<global::Kurrent.Client.Model.ErrorDetails.StreamRevisionConflict, TState, ValueTask<TResult>> onStreamRevisionConflict, TState state) => Case switch {
//         AppendStreamFailureCase.StreamNotFound => onStreamNotFound(AsStreamNotFound, state),
//         AppendStreamFailureCase.StreamDeleted => onStreamDeleted(AsStreamDeleted, state),
//         AppendStreamFailureCase.AccessDenied => onAccessDenied(AsAccessDenied, state),
//         AppendStreamFailureCase.TransactionMaxSizeExceeded => onTransactionMaxSizeExceeded(AsTransactionMaxSizeExceeded, state),
//         AppendStreamFailureCase.StreamRevisionConflict => onStreamRevisionConflict(AsStreamRevisionConflict, state),
//     };
//
//     #endregion
//
//     #region . IResultError .
//
//     ///<inheritdoc />
//     public IResultError Error => (IResultError)_value;
//
//     /// <summary>
//     /// Gets the error code from the currently stored error.
//     /// </summary>
//     public string ErrorCode => Error.ErrorCode;
//
//     /// <summary>
//     /// Gets the error message from the currently stored error.
//     /// </summary>
//     public string ErrorMessage => Error.ErrorMessage;
//
//     /// <summary>
//     /// Creates an exception from the currently stored error.
//     /// </summary>
//     /// <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
//     /// <returns>An exception that represents the current error.</returns>
//     public Exception CreateException(Exception? innerException = null) => Error.CreateException(innerException);
//
//     /// <summary>
//     /// Creates and throws an exception from the currently stored error.
//     /// </summary>
//     /// <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
//     public Exception Throw(Exception? innerException = null) => Error.Throw(innerException);
//
//     #endregion
//
//     /// <summary>
//     /// Returns a string representation of the current variant value.
//     /// </summary>
//     public override string? ToString() => _value?.ToString();
// }
