<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net8.0;net9.0</TargetFrameworks>
    <LangVersion>latest</LangVersion>
		<IsPackable>false</IsPackable>
    <IsRoslynComponent>true</IsRoslynComponent>
    <Nullable>enable</Nullable>
    <RootNamespace>Kurrent.Variant.SourceGenerators</RootNamespace>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <!-- This ensures the project itself is treated as an analyzer package -->
    <DevelopmentDependency>true</DevelopmentDependency>
    <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
  </PropertyGroup>

  <ItemGroup>
    <!-- Roslyn API for writing C# Source Generators -->
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.8.0" PrivateAssets="all" />
    <!-- Analyzers package, often included with CSharp but good to be explicit -->
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4" PrivateAssets="all">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
<!--    &lt;!&ndash;-->
<!--      The generator needs to compile against the IWhatever interfaces.-->
<!--      This ProjectReference is for the generator's own compilation.-->
<!--      PrivateAssets="all" ensures that the Whatever.dll is not passed along as a dependency-->
<!--      of projects that consume this generator.-->
<!--      ReferenceOutputAssembly="false" is also important for this.-->
<!--    &ndash;&gt;-->
<!--    <ProjectReference Include="..\Variant\Variant.csproj" PrivateAssets="all" ReferenceOutputAssembly="false" />-->
  </ItemGroup>

</Project>
