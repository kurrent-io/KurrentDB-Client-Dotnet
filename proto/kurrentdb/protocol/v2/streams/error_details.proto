syntax = "proto3";

package kurrentdb.protocol.v2;

option csharp_namespace    = "KurrentDB.Protocol.Streams.V2";
option java_package        = "io.kurrentdb.protocol.streams.v2";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "core.proto";

message StreamsErrorDetails {
  // When the stream has been deleted.
  message StreamDeleted {
    option (error_info) = {
      code : "STREAM_DELETED",
      severity : RECOVERABLE,
      message : "The stream has been soft deleted. It will not be visible in the stream list, until it is restored by appending to it again."
    };

    // The name of the stream that was deleted.
    optional string stream = 1;

    // The time when the stream was deleted.
    google.protobuf.Timestamp deleted_at = 2;
  }

  // When the stream has been tombstoned.
  message StreamTombstoned {
    option (error_info) = {
      code : "STREAM_TOMBSTONED",
      severity : FATAL,
      message : "The stream has been tombstoned. It has been permanently removed from the system and cannot be restored."
    };

    // The name of the stream that was tombstoned.
    optional string stream = 1;

    // The time when the stream was tombstoned.
    google.protobuf.Timestamp tombstoned_at = 2;
  }

  // When the stream is not found.
  message StreamNotFound {
    option (error_info) = {
      code : "STREAM_NOT_FOUND",
      severity : RECOVERABLE,
      message : "The specified stream was not found. Please check the stream name and try again."
    };

    // The name of the stream that was not found.
    optional string stream = 1;
  }

  // When the expected revision of the stream does not match the actual
  // revision.
  message StreamRevisionConflict {
    option (error_info) = {
      code : "REVISION_CONFLICT",
      severity : RECOVERABLE,
      message : "The actual stream revision does not match the expected revision."
    };

    // The actual revision of the stream.
    int64 stream_revision = 1;
  }


  message MaxAppendEventSizeExceeded {
    option (error_info) = {
      code : "MAX_APPEND_EVENT_SIZE_EXCEEDED",
      severity : FATAL,
      message : "The size of the event being appended exceeds the maximum allowed size."
    };

    // The record ID of the event that exceeded the size limit.
    optional string record_id = 2;

    // The maximum allowed size of a single record that can be appended to a stream in bytes.
    optional uint32 max_size = 1;
  }

  // When the transaction exceeds the maximum size allowed
  // (its bigger than the configured chunk size).
  message TransactionMaxSizeExceeded {
    option (error_info) = {
      code : "TRANSACTION_MAX_SIZE_EXCEEDED",
      severity : FATAL,
      message : "The transaction exceeds the maximum size allowed."
    };

    // The maximum allowed size of the transaction.
    uint32 max_size = 1;
  }

  message LogPositionNotFound {
    option (error_info) = {
      code : "LOG_POSITION_NOT_FOUND",
      severity : RECOVERABLE,
      message : "The specified log position was not found."
    };
  }
}
